let g:plug_shallow = 0
let maplocalleader = ","

" md calculator plugin (WIP)
" https://blog.semanticart.com/2017/01/05/lets-write-a-basic-vim-plugin/
let sql_runner_cmd = 'bash -i -c "qmarkdown-sql-calculate '
set runtimepath+=~/.dotfiles/modules/vim/mdcalc.vim/
set mouse-=a " disable annoying mouse selection

call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sleuth'
Plug 'godlygeek/tabular' " required by plasticboy/vim-markdown
Plug 'plasticboy/vim-markdown'
Plug 'mxw/vim-jsx'
Plug 'derekwyatt/vim-scala'
Plug 'airblade/vim-gitgutter'
Plug 'chrisbra/csv.vim'
call plug#end()

"set colorcolumn=+1        " highlight column after 'textwidth'
"set colorcolumn=+1,+2,+3  " highlight three columns after 'textwidth'
"highlight ColorColumn ctermbg=lightgrey guibg=lightgrey

" Set up syntax stuff
syntax on
filetype on
filetype plugin on
filetype indent on

set showmatch
set matchtime=0
set shortmess=atI
set ruler " not working (to see current column)
set showcmd

set sidescroll=1
set sidescrolloff=3

" Set xterm title
set title

" Search options
set hlsearch
set incsearch
set ignorecase
set smartcase
set visualbell
set noerrorbells
set printoptions=paper:letter

" Keep more lines of context
set scrolloff=5

" Quick timeouts on key combinations.
set timeoutlen=300

" Manual file type per extension
"autocmd BufRead *.md set filetype=markdown " seems not needed
autocmd BufRead *.sc set filetype=scala
autocmd BufRead *.xfa set filetype=xml
autocmd BufRead *.xru set filetype=xml
autocmd BufRead *.xna set filetype=xml
autocmd BufRead *.qcf set filetype=lisp
autocmd BufRead qpx.inc set filetype=make
autocmd BufRead letter* set filetype=mail

" ### BEGIN Settings per file type ###
" any filetype
autocmd Filetype * set formatoptions-=cro
" mail filetype
autocmd Filetype mail set fo -=l autoindent spell
" c/c++ filetype
autocmd Filetype c,cpp,h set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
" sh filetype
autocmd Filetype sh set ts=4 shiftwidth=2 expandtab
autocmd Filetype lisp,ruby,xml,html set ts=8 shiftwidth=2 expandtab
autocmd Filetype python set tabstop=4 shiftwidth=4 expandtab
" xml/diff filetype
autocmd Filetype xml,xslt,diff,ruby color desert
autocmd Filetype xml,xslt,diff,ruby set expandtab
set nocompatible
if has("autocmd")
  filetype plugin indent on
endif
" any other filetype
" ### END Settings per file type ###
"autocmd BufReadPre viper,.viper set filetype=lisp

"autocmd BufRead ~/stellar/* set lbr formatoptions=l
"autocmd BufRead *.dump set filetype=sql




"set title

"set t_Co=256
"set background=dark

"set scrolloff=7

set showcmd

"set number

set paste
set wildmode=longest,list

set noswapfile

"set modeline
set statusline=%<%f\ %h%m%r%Y%=%-14.(%l,%c%V%)\ %P
highlight StatusLine ctermfg=7
autocmd InsertEnter * highlight StatusLine ctermfg=5
autocmd InsertLeave * highlight StatusLine ctermfg=7

"set cursorline
highlight CursorLine   cterm=NONE ctermbg=white ctermfg=white guibg=white guifg=white

let g:syntastic_scala_checkers=['']

" Set up colors
"set termguicolors     " enable true colors support
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
colorscheme ron

" For reference: 
"   you can type :map to see the current mappings

"   :map  - Display all maps
"   :nmap - Display normal mode maps
"   :imap - Display insert mode maps
"   :vmap - Display visual and select mode maps
"   :smap - Display select mode maps
"   :xmap - Display visual mode maps
"   :cmap - Display command-line mode maps
"   :omap - Display operator pending mode maps
"
"  map (maps a character in normal mode)
"  imap (maps a character in normal mode)
"  vmap (maps a character in visual mode)

" Copy and paste
"   Control-c/x in visual mode to copy/cut
"   Control-v   in normal mode to paste
:vmap <C-c> "+y
:vmap <C-x> "+c
:map <C-v> c<ESC>"+p
:map <C-S-v> c<ESC>"+P

" Git configuration
let g:gitgutter_highlight_lines = 1

let g:gitgutter_sign_column_always = 0
let g:gitgutter_signs = 0 " do not show signs of change, only colors
highlight link GitGutterAddLine DiffAdd
highlight link GitGutterChangeLine DiffChange
highlight link GitGutterDeleteLine DiffDelete
highlight link GitGutterChangeDeleteLine GitGutterChangeLineDefault
":map <C-g> :GitGutterSignsToggle<CR>
":map <C-g> :GitGutterLineHighlightsToggle<CR>


set autoindent
set cindent
set shiftwidth=2
set expandtab


" CSV variables
" let g:csv_highlight_column = 'y'
let g:csv_delim='\^'

" Save current view settings on a per-window, per-buffer basis.
function! AutoSaveWinView()
    if !exists("w:SavedBufView")
        let w:SavedBufView = {}
    endif
    let w:SavedBufView[bufnr("%")] = winsaveview()
endfunction

" Restore current view settings.
function! AutoRestoreWinView()
    let buf = bufnr("%")
    if exists("w:SavedBufView") && has_key(w:SavedBufView, buf)
        let v = winsaveview()
        let atStartOfFile = v.lnum == 1 && v.col == 0
        if atStartOfFile && !&diff
            call winrestview(w:SavedBufView[buf])
        endif
        unlet w:SavedBufView[buf]
    endif
endfunction

" When switching buffers, preserve window view.
if v:version >= 700
    autocmd BufLeave * call AutoSaveWinView()
    autocmd BufEnter * call AutoRestoreWinView()
endif

" Commands / aliases
" Fantastic: https://github.com/jodavaho/bashlog/blob/master/vim_log
" Commit using command Lw
command MdCommitPush w | !git add % &&  git commit % -m "Checkin %" && git push
command MdView w | !remarkable %
command MdConfluencePublish w | ! bash -i -c "qtopic-push-to-confluence-file-x %"
command MdKeepPublish w | ! bash -i -c "qtopic-push-to-keep-file-x %"
command MdKeepUpdate w | ! bash -i -c "qtopic-update-to-keep-file-x %"
command MdCalculate w | ! bash -i -c "qmarkdown-sql-calculate %"
command MdDisable let g:vim_markdown_folding_disabled = 1
command QGitToggle GitGutterToggle
command QCsvPretty CSVTabularize

" Markdown syntax highlighting (vim-markdown plugin), first is the alias to use after ```, second the equivalent file extension
let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini', 'scala=scala', 'java=java', 'yaml=yaml', 'yml=yml', 'json=json', 'html=html']

set filetype=markdown
au BufRead,BufNewFile *.md set filetype=markdown
set autochdir
syntax enable

" Symbols colored
:highlight REDFG ctermbg=black ctermfg=red
:highlight YELLOWFG ctermbg=black ctermfg=yellow
:highlight GREENFG ctermbg=black ctermfg=green
:highlight GRAYFG ctermbg=black ctermfg=gray
:highlight WHITEFG ctermbg=black ctermfg=white
:highlight WHITEFGBG ctermbg=white ctermfg=gray
:highlight BLACKFG ctermfg=black

augroup asteriskbold
  au!
  au BufNewFile,BufRead *.md let jpositive = matchadd("GREENFG","(+)")

  " judgments
  au BufNewFile,BufRead *.md let jpositive = matchadd("GREENFG","(+)")
  au BufNewFile,BufRead *.md let jnegative = matchadd("REDFG", "(-)")
  au BufNewFile,BufRead *.md let jdoubtful = matchadd("YELLOWFG", "(?)")
  " tasks
  au BufNewFile,BufRead *.md let mdone = matchadd("BLACKFG","\\[/\\].*") " [/]  -> done
  au BufNewFile,BufRead *.md let mdone2 = matchadd("BLACKFG","\\[x\\].*") " [x]  -> done
  au BufNewFile,BufRead *.md let mprogress = matchadd("WHITEFG","\\[p\\].*") " [p]  -> in progress
  au BufNewFile,BufRead *.md let mtodo = matchadd("WHITEFG", "\\[ \\]") " [ ]  -> understood and to do
  au BufNewFile,BufRead *.md let mdeclined = matchadd("BLACKFG", "\\[-\\].*") " [-]  -> declined, won't do
  au BufNewFile,BufRead *.md let mblocked = matchadd("REDFG", "\\[b\\]") " [b]  -> blocked
  au BufNewFile,BufRead *.md let munknown = matchadd("YELLOWFG", "\\[?\\]") " [?]  -> unknown, unclear
  au BufNewFile,BufRead *.md let mnoteby = matchadd("YELLOWFG", "COMMENT .*: .*") " COMMENT MICHAEL: This is a comment done by Michael...
  au BufNewFile,BufRead *.md let mnoteby2 = matchadd("YELLOWFG", "BY .*: .*") " BY MICHAEL: This is a comment done by Michael...
  " misc
  au BufNewFile,BufRead *.md let mattention = matchadd("REDFG", "!!!")
  au BufNewFile,BufRead *.md let mconsequence = matchadd("GREENFG","==>")
  au BufNewFile,BufRead *.md let mmarker = matchadd("WHITEFGBG","%%%") " %%% -> marker (talk about it during a daily for instance)
augroup end




